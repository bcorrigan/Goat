<project name="Goat" default="compile" basedir=".">
	<description>
        Builds Goat.
	</description>
	<!-- set global properties for this build -->
	<property name="src" location="src"/>
	<property name="build" location="classes"/>
	<property name="jars" location="jars"/>
	<property name="version" value="2.0"/>
	<property name="docs" location="javadocs" />
    
    <path id="build.class.path">
        <pathelement path="${classpath}"/>
        <fileset dir="lib">
            <include name="**/*.jar"/>
        </fileset>
	  </path>
	  <property name='build.class.path' refid='build.class.path' />
	 
	<path id="run.class.path">
		<path refid="build.class.path"/>
		<pathelement location="classes"/>
	</path>
	<property name='run.class.path' refid='run.class.path' />
	
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<mkdir dir="${docs}"/>
	</target>

	<target name="compile" depends="init"
		description="compile the source ">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" source="1.5" target="1.5" optimize="yes" debug="on" debuglevel="lines,vars,source">
            <classpath refid="build.class.path"/>
      </javac>
	</target>

	<target name="jar" depends="compile" description="Make a binary jar">
		<mkdir dir="${jars}/bin"/>
		<!--Need to narrow this to specific OSs via "os" property-->
		<exec executable="/bin/sh" output="${build}/goatRevision" osFamily="unix">
			<arg line="tools/version.sh"/>
		</exec>

		<jar jarfile="${jars}/bin/Goat-${DSTAMP}.jar" basedir="${build}" duplicate="fail">
			<manifest>
				<attribute name="Main-Class" value="goat.Goat"/>
				<attribute name="Built-By" value="${user.name}"/>
				<section name="common">
					<attribute name="Specification-Title" value="Goatyness"/>
					<attribute name="Specification-Version" value="Goaty Goat"/>
					<attribute name="Goat-Title" value="Goat"/>
					<attribute name="Goat-Version" value="2.0 ${DSTAMP} "/>
				</section>
			</manifest>
		</jar>
		<!-- <delete file="${build}/goatRevision"/> -->
		<!-- delete the jar in top dir, and replace with updated copy -->
		<delete file="goat.jar"/>
		<copy file="${jars}/bin/Goat-${DSTAMP}.jar" tofile="goat.jar"/>
	</target>

	<target name="doc"
		description="build documentation from source files"
		depends="init">
		<javadoc packagenames="*" sourcepath="${src}" destdir="${docs}" 
			author="yes" version="yes" use="yes" verbose="yes" 
			source="1.5" />
	</target>

	<target name="clean"
		description="clean up"
		depends="jarclean">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete>
			<fileset dir="${build}" includes="**/*" />
		</delete>
	</target>

	<!-- still would like to get this to work in non-forked mode -->
	<target name="run" description="Start up goat">
		<!-- The classpath malarky works properly now, but only in
			forked mode.  Next line is for debugging purposes -->
		<!-- <echo message="Using classpath: ${run.class.path}" /> -->
      <java classname="goat.Goat" fork="true" classpathref="run.class.path">
			<jvmarg value="-server" />
		</java>
	</target>
	  
	 <target name="jarclean" description="remove old goat jars">
		 <delete verbose='true'>
			 <fileset dir="jars/bin" includes="**/*.jar"/>
		 </delete>
	 </target>
 
</project>


